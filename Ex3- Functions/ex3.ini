1.)write function zipper' that is a curried version of zipper
zipper' [1,2,3] ['a','b','c']
[(1,'a'),(2,'b'),(3,'c')]
zipper' [4,3,2,1] "hello"
[(4,'h'),(3,'e'),(2,'l'),(1,'l')]
zipper' [] "functional"
[]
what's the type of zipper'?
ประเภทของ zipper'
zipper' มีประเภท (type) ดังนี้:
zipper' :: [a] -> [b] -> [(a, b)]
หมายความว่า zipper' เป็นฟังก์ชัน curried ที่รับลิสต์สองอัน [a] และ [b] แล้วคืนค่าลิสต์คู่ [(a, b)] ซึ่งเป็นผลลัพธ์จากการจับคู่ค่าที่ตรงกันจากลิสต์ทั้งสอง


what's the type of zipper' []?
ประเภทของ zipper' []
เมื่อใช้งาน zipper' []:
zipper' [] :: [b] -> [(a, b)]
หมายความว่า zipper' [] เป็นฟังก์ชันที่รับลิสต์ [b] และคืนค่าลิสต์ว่าง [] (ประเภทคือ [(a, b)])
สิ่งที่ zipper' [] ทำ
เมื่อเรียกใช้ zipper' [] จะทำการจับคู่ค่าจากลิสต์ที่สอง (ys) กับลิสต์ว่าง (xs = []) ซึ่งจะคืนค่าผลลัพธ์เป็นลิสต์ว่างเสมอ ([]) ไม่ว่าลิสต์ที่สองจะมีค่าอะไร 

what does zipper' [] do?
is there a simpler way to express the same thing?
zipper' [] "functional"
ผลลัพธ์: []
สามารถใช้ zip ได้โดยตรง เพราะ zip เป็นฟังก์ชัน curried อยู่แล้ว:
-zipper' = zip
วิธีการเขียนที่เรียบง่ายกว่าคือ
-zip :: [a] -> [b] -> [(a, b)]
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
2.)write function fac that computes the factorial of a given nonnegative number
fac 0 = 1
fac n = n * fac (n-1)

what's the type of fac?
-fac :: Integer -> Integer
is your implementation of fac safe?
-ไม่ safe 
if so, why?
-หาก n มีค่ามากเกินไป (n > threshold) การคำนวณ factorial 
จะทำให้หน่วยความจำหรือ stack overflow เพราะ recursion ลึกเกินไป หรืออาจเกิด overflow ของค่าผลลัพธ์ (แม้ใน Integer ที่มีขนาดใหญ่)
if not, when is it not safe, and what should you do to make it safer?
no need to implement what you want to do
-ใช้การคำนวณแบบ Iterative แทน Recursive:
การใช้ loop หรือฟังก์ชัน tail-recursive แทน recursion จะช่วยลดโอกาสเกิด stack overflow

